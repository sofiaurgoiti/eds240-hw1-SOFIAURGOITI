---
title: "HW 1: Code Annotation & Data Selection"
author: Sofia Urgoiti Crespo (she/her)
date: 2024-01-08
editor_options: 
  chunk_output_type: console
---

# Part 1: Annotating Code

## 1a: Annotate following code:

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                  1. setup                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse) # ANNOTATE (brief explanation of pkg) ----
library(patchwork) # ANNOTATE (brief explanation of pkg) ----
library(showtext) # ANNOTATE (brief explanation of pkg) ----

#......................download Google Fonts.....................
# ANNOTATE (explain differences between arguments `name` & `family`) ----
font_add_google(name = "Roboto", family = "roboto")
font_add_google(name = "Roboto Condensed", family = "roboto condensed")
font_add_google(name = "Oswald", family = "oswald")
font_add_google(name = "Khula", family = "khula")
font_add_google(name = "Share Tech Mono", family = "techmono")

#.....settings for using imported texts in future saved plot.....
showtext_opts(dpi = 320) # tell {showtext} the resolution for the device ----
showtext_auto(enable = TRUE) # automatically use {showtext} to render text for future devices ----

#................load TidyTuesday data from GitHub...............
tuesdata <- tidytuesdayR::tt_load(x = 2022, week = 15)

#........extract individual data sets from tuesdata (list).......
indoor_pollution <- tuesdata$indoor_pollution 
death_ts <- tuesdata$death_timeseries
death_full <- tuesdata$death_fuel
fuel_gdp <- tuesdata$fuel_gdp

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              2. data wrangling                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#......ANNOTATE (generally, what does this code block do?).......
indoor_pollution <- indoor_pollution %>%
  
  # ANNOTATE (briefly explain this line of code) ----
  rename(perc_death = 4) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = "iso3c", destination = "continent")) 

#......ANNOTATE (generally, what does this code block do?).......
gap_indoor <- indoor_pollution %>%
  
  # ANNOTATE (briefly explain this line of code) ----
  filter(!is.na(Code), Code != "OWID_WRL") %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  filter(Year %in% c(1990, 2019)) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  mutate(year = glue::glue("Y{Year}")) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  pivot_wider(id_cols = c("Entity", "Code"), names_from = year, values_from = perc_death) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  mutate(gap = Y2019 - Y1990) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = "iso3c", destination = "continent")) 

#......ANNOTATE (generally, what does this code block do?).......
fuel_gdp_clean <- fuel_gdp %>%
  
  # ANNOTATE (briefly explain this line of code) ----
  rename(clean_fuel = 4, gdp = 5, population = 6) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  select(-Continent) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = "iso3c", destination = "continent")) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  filter(!is.na(continent)) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          3. prep ggplot elements                         ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#......ANNOTATE (generally, what does this code block do?).......
pal <- c("#02403A", "#0A7373", "#757A62", "#EDAA25", "#C43302")

#......ANNOTATE (generally, what does this code block do?).......
graph_legend <- "The first graph shows the relation between the decrease of the percentage of deaths and the access to clean fuel.\nEach country is represented by a line connecting all the values from 2002 to 2019.\nIt shows that for many countries the access to clean fuel for cooking increased over\n the years resulting in a reduction of percentage of death due to indoor air pollution.\n\nThe graph below shows the evolution between 1990 and 2019\n in the distribution of the percentage of death among\n the countries of each continent."

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                       4. build connected scatterplot                     ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#......ANNOTATE (generally, what does this code block do?).......
connected_scatterplot_df <- indoor_pollution %>%
  
  # ANNOTATE (briefly explain this line of code) ----
  select(-continent) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  left_join(fuel_gdp_clean, by = c("Entity" = "Entity", "Code" = "Code", "Year" = "Year")) %>% 
  
  # ANNOTATE (briefly explain this line of code) ----
  filter(!is.na(clean_fuel), !is.na(gdp)) 

#..................create connected scatterplot..................

#......ANNOTATE (generally, what does this code block do?).......
connected_scatterplot <- ggplot(data = connected_scatterplot_df, aes(x = clean_fuel, y = perc_death, alpha = Year)) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_line(aes(group = Code, color = continent), linewidth = 0.9) + 
  
  # add scatterplot layer; points colored by 'continent' variable, outlined in white ----
  geom_point(aes(fill = continent), size = 1, shape = 21, color = "white") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  annotate("text", x = 96, y = 21, label = graph_legend, family = "roboto", size = 4, hjust = 1, vjust = 1) + 
  
  # convert x-axis & y-axis values to %; add some padding between data and axes ----
  scale_x_continuous(labels = scales::label_percent(scale = 1), expand = c(0.01, 0.01)) + 
  scale_y_continuous(labels = scales::label_percent(scale = 1, accuracy = 1), expand = c(0.01, 0.01)) + 
  
  # ANNOTATE (briefly explain these lines of code) ----
  scale_color_manual(values = rev(pal)) + 
  scale_fill_manual(values = rev(pal)) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  guides(alpha = "none", color = "none", fill = "none") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  theme_light(base_family = "roboto condensed") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  labs(x = "% of access to clean fuel", 
       y = "% of deaths") + 
  
  # ANNOTATE (briefly explain these lines of code) ----
  theme(axis.title.y = element_text(margin = margin(t = -20, r = -80, b = 0, l= 0), angle = 0, size = 12), 
        axis.title.x = element_text(margin = margin(t = 10), size = 12), 
        
        # ANNOTATE (briefly explain this line of code) ----
        axis.text = element_text(size = 11), 
        
        # ANNOTATE (briefly explain this line of code) ----
        panel.border = element_blank())

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            5. build histograms                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.............df of % ranges used to build histogram.............
histo_evolution_df <- gap_indoor %>%
  
  # assign % death to a range (e.g. AFG (Y1990): 19.623 -> range of 15-20), as factors ----
  mutate(c1990 = cut(Y1990, breaks = c(0,1,2,5,10,15,20,25)), 
         c2019 = cut(Y2019, breaks = c(0,1,2,5,10,15,20,25))) %>% 
  
  # use regular expressions (regex) to separate the lower and upper range values ----
  mutate(sep1990 = str_match(c1990, "^\\(([0-9]+),([0-9]+)]$"), 
         sep2019 = str_match(c2019, "^\\(([0-9]+),([0-9]+)]$")) %>%
  
  # use regex to create nicely-formatted percentage ranges ----
  mutate(c1990 = glue::glue("{sep1990[,2]}% to {sep1990[,3]}%"), 
         c2019 = glue::glue("{sep2019[,2]}% to {sep2019[,3]}%")) %>% 
  
  # reorder factors in the c1990 & c2019 cols by values in the `sep1990[,2]` & `sep2019[,2]` columns ----
  mutate(c1990 = fct_reorder(c1990, parse_number(sep1990[,2])), 
         c2019 = fct_reorder(c2019, parse_number(sep2019[,2]))) %>%
  
  # reverse the order of factors (low > high) in c1990 & c2019 cols ----
  mutate(c2019 = fct_rev(c2019),
         c1990 = fct_rev(c1990)) 

#......ANNOTATE (generally, what does this code block do?).......
# ANNOTATE (briefly explain this line of code) ----
histo_evolution <- ggplot(data = histo_evolution_df) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_histogram(aes(x = c1990), stat = "count", alpha = 0) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  annotate("rect", xmin = 4.5 ,xmax = 7.6, ymin = 0, ymax = 36, fill = "#e1e1e1", alpha = 0.5) +
  
  # ANNOTATE (briefly explain this line of code) ----
  annotate("text", x = 5, y = 25, label = "0% to 5%", color = "grey60", family = "Oswald", size = 5, fontface = "bold") +
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_histogram(aes(x = c1990, fill = continent), stat = "count", alpha = 0.3) +
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_histogram(aes(x = c2019, fill = continent), stat = "count", width = 0.5) +
  
  # ANNOTATE (briefly explain this line of code) ----
  scale_fill_manual(values = rev(pal)) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  coord_flip() + 
  
  # ANNOTATE (briefly explain this line of code) ----
  facet_wrap(~continent, ncol = 5) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  guides(fill = "none") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  labs(caption = "Number of country for each range of percentage of death from indoor air pollution.\nThe light bars represent the distribution in 1990 and the dark and narrow bars represent the distribution in 2019.\nThe bin from 0% to 5% is splitted in 3 differents bins (0% to 1%, 1% to 2% and 2% to 3%) to give more detail for the countries\n which reached a low level of death, while the other bins represent 5% range.") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  theme_void() + 
  
  # ANNOTATE (briefly explain this line of code) ----
  theme(axis.text.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), family = "roboto condensed", color = "grey30", size = 12), 
        
        # ANNOTATE (briefly explain this line of code) ----
        axis.text.y = element_text(family = "roboto condensed", color = "grey30", size = 12),
        
        # ANNOTATE (briefly explain this line of code) ----
        panel.grid.major.x = element_line(color = "grey60", linetype = "13"), 
        
        # ANNOTATE (briefly explain this line of code) ----
        panel.spacing.x = unit(8, "mm"), 
        
        # ANNOTATE (briefly explain this line of code) ----
        strip.text = element_blank(), 
        
        # ANNOTATE (briefly explain this line of code) ----
        plot.caption = element_text(family = "roboto", size = 12, color = "black", hjust = 0, margin = margin(t = 25, l = 40), lineheight = 1.1)) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              6. build legends                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#......ANNOTATE (generally, what does this code block do?).......
legend_df <- tibble(pos = c(0, 2, 4, 6, 8),
                    country = sort(unique(fuel_gdp_clean$continent)))

#......ANNOTATE (generally, what does this code block do?).......
# ANNOTATE (briefly explain this line of code) ----
legend <- ggplot(data = legend_df) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_rect(aes(xmin = pos, xmax = pos + 1, 
                ymin = 0.35, ymax = 0.75, fill = country), size = 6) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  geom_text(aes(x = pos + 0.5, y = 0.45, label = country), 
            family = "oswald", color = "white", size = 6, 
            hjust = 0.5, vjust = 0, fontface = "bold") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  scale_fill_manual(values = rev(pal)) +
  
  # ANNOTATE (briefly explain this line of code) ----
  scale_y_continuous(limits = c(0,1)) + 
  scale_x_continuous(limits = c(0,9)) + 
  
  # ANNOTATE (briefly explain this line of code) ----
  guides(color = "none", fill = "none") + 
  
  # ANNOTATE (briefly explain this line of code) ----
  theme_void() 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##              7. assemble all plot components using {patchwork}           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## NOTE: this plot may not look correct when opened in the Viewer! You'll need to save a PNG (in part 8, below) to view it correctly ##

# ANNOTATE (briefly explain this line of code) ----
final_plot <- connected_scatterplot / legend / histo_evolution + 
  
  # ANNOTATE (briefly explain this line of code) ----
  plot_layout(heights = c(3, 0.5, 1)) + 
  
  ## ANNOTATE (briefly explain these lines of code) ----
  plot_annotation( 
  caption = "Visualization: Christophe Nicault | Data: Our world in Data",
  title = "Evolution of deaths from indoor air pollution",
  subtitle = str_wrap("The percentage of death from indoor air pollution decreased in many countries in the last 30 years, due to a better access to clean fuel for cooking. However there are inequalities with many countries still lacking access, particularly in Africa, Oceania and Asia.", 100),
  
  # ANNOTATE (briefly explain these lines of code) ----
  theme = theme( 
    plot.margin = margin(10,10,5,10),
    plot.title = element_text(family = "khula", size = 22, color = "#02403A", face = "bold", hjust = 0.5, margin = margin(5,0,10,0)),
    plot.subtitle = element_text(family = "khula", size = 14, color = "black", hjust = 0.5, margin = margin(10,0,20,0)),
    plot.caption = element_text(family = "techmono", size = 11, color = "#02403A", hjust = 0.95, margin = margin(20,0,5,0))   
  )
)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            8. save plot as a PNG                         ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........open plotting device to draw plot to a PNG file.........
# specify file path/name and png resolution & size
ragg::agg_png(here::here("outputs", paste0("indoor_pollution_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".png")), 
              res = 320, width = 12, height = 13, units = "in")

#................plot object that you want to draw...............
final_plot

#....................turn off plotting device....................
# once off, you should see your .png file appear in outputs/ folder
dev.off()
```

## 1b : Questions

*1. Describe two elements of this plot that you find visually-pleasing / easy to understand / intuitive. Why? (4-10 sentences)*

*2. Describe two elements of this plot that you feel could be better presented in a different way. Why? (4-10 sentences)*

*3. Describe two new things that you learned by interpreting / annotating this code. These could be packages, functions, or even code organizational approaches that you hadn’t previously known about or considered. (4-10 sentences)*


# Part 2: Selecting a dataset

*1. Describe your data set(s). Be sure to address the following (<=4 sentences)*
1a. Where did you find these data?
1b. What variables do these data contain? Is there sufficient metadata for understanding what those variables are?

*2. What steps are involved in downloading or accessing the data (e.g. “I can download using a button via this online portal,” “There’s an R package for scraping the data,” “I need to use an API to scrape the data,” etc.)? (1-2 sentences)*

*3. What question(s) do you want to answer using these data (it’s okay if these questions evolve over time, this is just a starting point)? (<=4 sentences)*

*4. Will you need to combine multiple data sets to successfully answer your question(s)? If so, have you found all the necessary data? Do you have a way to combine it (e.g. matching key values across all data sets)? (<=4 sentences)*
Optional: Import your data into R! (this will be a part of the next homework assignment) IMPORTANT: If your data files are large (>2GB) DO NOT push your data to GitHub – instead, add your data file(s) or entire data folder to your .gitignore (you’ll practice this in Discussion section this week).
